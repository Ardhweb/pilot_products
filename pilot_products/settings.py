"""
Django settings for pilot_products project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()
from pathlib import Path
from colorama import Fore
import dj_database_url
from colorama import init, Fore

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'coverit',
    'core',
    'webnode',
    'accounts',
    'generators',
    'timeline',
    
   
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pilot_products.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pilot_products.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# Initialize colorama
init(autoreset=True)

BASE_DIR = Path(__file__).resolve().parent.parent



# Environment variables for database selection
USE_MYSQL = os.getenv('USE_MYSQL', 'False').lower() in ('true', '1', 't')
USE_POSTGRESQL = os.getenv('USE_POSTGRESQL', 'False').lower() in ('true', '1', 't')
RENDER_POSTGRESQL_EXTERNAL_URL = os.getenv('RENDER_POSTGRESQL_EXTERNAL_URL')
# Define the base directory for SQLite
BASE_DIR = Path(__file__).resolve().parent

# Database configuration based on the environment variables
if USE_MYSQL:
    db_name = os.getenv('MYSQL_DB_NAME')
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': db_name,
            'USER': os.getenv('MYSQL_DB_USER'),
            'PASSWORD': os.getenv('MYSQL_DB_PASSWORD'),
            'HOST': os.getenv('MYSQL_DB_HOST'),
            'PORT': '3306',
        }
    }
    print(f"{Fore.GREEN}Using MySQL database: {db_name} (True)")

elif USE_POSTGRESQL:
    db_name = os.getenv('POSTGRESQL_DB_NAME')
    DATABASES = {
        # 'default': {
        #     'ENGINE': 'django.db.backends.postgresql',
        #     'NAME': db_name,
        #     'USER': os.getenv('POSTGRESQL_DB_USER'),
        #     'PASSWORD': os.getenv('POSTGRESQL_DB_PASSWORD'),
        #     'HOST': os.getenv('POSTGRESQL_DB_HOST'),
        #     'PORT': '5432',
        # }
        'default': dj_database_url.config(
        default=RENDER_POSTGRESQL_EXTERNAL_URL,
        conn_max_age=1200
        )

    }
    print(f"{Fore.GREEN}Using PostgreSQL database: {db_name} (True)")

else:
    db_name = BASE_DIR / 'db.sqlite3'
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME':'db.sqlite3',
        }
    }
    print(f"{Fore.GREEN}Using SQLite db")

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
MEDIA_ROOT  = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "static"
# Optional: for better caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTHENTICATION_BACKENDS = (
    # 'django.contrib.auth.backends.ModelBackend',
    'accounts.backends.CustomBackend',
    
)
AUTH_USER_MODEL = 'accounts.User'


